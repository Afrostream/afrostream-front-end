{"version":3,"sources":["../../../server/app/api/api-front.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;uEAUO,iBAA4B,GAA5B,EAAiC,cAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACQ,YAAE,MAAF,oBACX,iBAAE,KAAF,CAAQ;AACJ,sBAAQ,MADJ;AAEJ,oBAAM;AAFF,aAAR,EAIE,kBAAkB,EAJpB,CADW,CADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;kBAAe,W;;;;;;;;;;;;;;;;;;;;;uEAgDf;AAAA,sCAAsC,IAAtC;AAAsC,UAAtC;AAAA;;AAAA,qBACI,IADJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACkB,QAAQ,KAAR,CAAc,IAAd,EAAoB,IAApB,CADlB;;AAAA;AAAA;AAAA;AACI,gBADJ;AAAA,8CAEE,IAFF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;kBAAe,kB;;;;;;;;;;;;QAhCN,O,GAAA,O;QA0CA,G,GAAA,G;;AApEhB;;;;AACA;;;;AACA;;;;AACA;;;;;;IACO,S,oBAAA,S;AAsBA,SAAS,OAAT,CAAkB,GAAlB,EAAuB,IAAvB,EAA6B,cAA7B,EAA6C;AAClD,SAAO,KAAK,OAAL,CAAa,IAAI,MAAJ,OAAe,UAAU,SAAzB,CAAb,EAAoD,EAApD,CAAP;AACA,MAAI,WAAS,UAAU,SAAnB,GAA+B,IAAnC;;AAEA,UAAQ,GAAR,CAAY,mBAAZ,EAAiC,GAAjC;;AAEA,MAAI,eAAe,iBAAE,KAAF,CAAQ,EAAR,EAAY,IAAI,KAAJ,IAAa,EAAzB,CAAnB;;AAEA,SAAO,YAAE,MAAF,oBACL,iBAAE,KAAF,CACE;AACE,YAAQ,KADV;AAEE,UAAM,IAFR;AAGE,QAAI,YAHN;AAIE,SAAK,GAJP;AAKE,aAAS;AACP,+BAAyB,IAAI,QADtB;AAEP,6BAAuB,IAAI;AAFpB;AALX,GADF,EAWE,kBAAkB,EAXpB,CADK,CAAP;AAeD,CAmBM,SAAS,GAAT,CAAc,GAAd,EAAmB;AACxB,SAAO,UAAU,GAAV,EAAe,IAAf,EAAqB;AAC1B,QAAI,GAAJ,EAAS;AACP,UAAI,MAAJ,CAAW,GAAX,EAAgB,IAAhB,CAAqB,EAAC,OAAO,OAAO,GAAP,CAAR,EAArB;AACD,KAFD,MAEO;AACL,UAAI,kBAAkB,KAAK,CAAL,CAAtB;UACI,cAAc,KAAK,CAAL,CADlB;AAEA,cAAQ,gBAAgB,UAAxB;AACE,aAAK,GAAL;AACA,aAAK,GAAL;AACE,cAAI,gBAAgB,OAAhB,IACF,gBAAgB,OAAhB,CAAwB,QAD1B,EACoC;AAClC,gBAAI,GAAJ,CAAQ,UAAR,EAAoB,gBAAgB,OAAhB,CAAwB,QAA5C;AACD;AACD;AACF;AACE;AATJ;;AAYA,UAAI,MAAJ,CAAW,gBAAgB,UAA3B,EAAuC,IAAvC,CAA4C,WAA5C;AACD;AACF,GApBD;AAqBD","file":"api-front.js","sourcesContent":["import Q from 'q'\nimport _ from 'lodash'\nimport config from '../../../config'\nimport request from 'request'\nconst {apiServer} = config\n/**\n * call request on external api\n * @param req\n * @param path\n */\nexport async function getExternal (req, requestOptions) {\n  return await Q.nfcall(request,\n    _.merge({\n        method: 'POST',\n        json: true\n      },\n      requestOptions || {}\n    )\n  )\n}\n\n/**\n * call this method when you don't need the token (faster & safer)\n * @param req\n * @param path\n */\nexport function getData (req, path, requestOptions) {\n  path = path.replace(new RegExp(`^${apiServer.urlPrefix}`), '')\n  var url = `${apiServer.urlPrefix}${path}`\n\n  console.log('request api-front', url)\n\n  var queryOptions = _.merge({}, req.query || {})\n\n  return Q.nfcall(request,\n    _.merge(\n      {\n        method: 'GET',\n        json: true,\n        qs: queryOptions,\n        uri: url,\n        headers: {\n          'x-forwarded-client-ip': req.clientIp,\n          'x-forwarded-user-ip': req.clientIp\n        }\n      },\n      requestOptions || {}\n    )\n  )\n}\n\n/**\n * call the front-api & return the json body\n * @param req             express request object\n * @param path            front-api path\n * @param requestOptions  request options\n * @return promise<json>\n */\nexport async function getBodyWithoutAuth (...args) {\n  const [, body] = await getData.apply(null, args)\n  return body\n}\n\n/*\n * forward backend result to the frontend.\n *\n * ex: backend.getData(req, '/api/categorys/4242').nodeify(backend.fwd(res))\n */\nexport function fwd (res) {\n  return function (err, data) {\n    if (err) {\n      res.status(500).json({error: String(err)})\n    } else {\n      var backendResponse = data[0]\n        , backendBody = data[1]\n      switch (backendResponse.statusCode) {\n        case 301:\n        case 302:\n          if (backendResponse.headers &&\n            backendResponse.headers.location) {\n            res.set('location', backendResponse.headers.location)\n          }\n          break\n        default:\n          break\n      }\n\n      res.status(backendResponse.statusCode).send(backendBody)\n    }\n  }\n}\n"]}