{"version":3,"sources":["../../server/app/render.js"],"names":[],"mappings":"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","file":"render.js","sourcesContent":["import React from 'react'\nimport ReactDOMServer from 'react-dom/server'\nimport { match } from 'react-router'\nimport { createMemoryHistory } from 'history'\nimport request from 'superagent'\nimport config from '../../config'\nimport qs from 'qs'\nimport createStore from '../../src/js/lib/createStore'\nimport createAPI from '../../src/js/lib/createAPI'\nimport routes from '../../src/js/routes'\nimport Router from '../../src/js/components/Router'\nimport { Provider } from 'react-redux'\nimport PrettyError from 'pretty-error'\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment'\nimport Helmet from 'react-helmet'\nimport _ from 'lodash'\nconst pretty = new PrettyError()\nconst {apps, apiServer} = config\n\nexport default function render (req, res, layout, {payload}) {\n  const {path} = req\n  const history = createMemoryHistory(path)\n  const location = history.createLocation(path)\n\n  const api = createAPI(\n    /**\n     * Server's createRequest() method\n     * You can modify headers, pathname, query, body to make different request\n     * from client's createRequest() method\n     *\n     * Example:\n     * You API server is `http://api.example.com` and it require accessToken\n     * on query, then you can assign accessToken (get from req) to query object\n     * before calling API\n     */\n    ({method, headers = {}, pathname = '', query = {}, body = {}, local = false}) => {\n      var url = `${apiServer.urlPrefix}${pathname}`\n      if (local) {\n        url = pathname\n      }\n      return request(method, url)\n        .query(qs.stringify(query))\n        .set(headers)\n        .send(body)\n    }\n  )\n\n  const store = createStore(api, history)\n\n  match({\n      routes,\n      location\n    }, async (err, redirectLocation, renderProps) => {\n\n      try {\n        if (redirectLocation) {\n          res.redirect(301, redirectLocation.pathname + redirectLocation.search)\n        } else if (err) {\n          throw err\n        } else if (renderProps === null) {\n          return res.status(404)\n            .send('Not found')\n        } else {\n\n          let {params, location, routes} = renderProps\n          let route = routes && routes[routes.length - 1]\n          params.lang = routes && routes.length > 2 && routes[2].path\n\n          const prepareRouteMethods = _.map(renderProps.components, component =>\n          component && component.prepareRoute)\n\n          for (let prepareRoute of prepareRouteMethods) {\n            if (!prepareRoute) {\n              continue\n            }\n            try {\n              await prepareRoute({store, params, location, route})\n            } catch (err) {\n              console.error('Prepare route ERROR:', pretty.render(err))\n            }\n          }\n\n          const body = ReactDOMServer.renderToStaticMarkup(\n            <Provider {...{store}}>\n              <Router {...{...renderProps, location}} />\n            </Provider>\n          )\n\n          const initialState = store.getState()\n          let metadata = Helmet.rewind()\n\n          return res.render(layout, {\n            ...payload,\n            title: metadata.title,\n            meta: metadata.meta,\n            name: 'Afrostream',\n            link: metadata.link,\n            iosAppId: apps.iosAppId,\n            androidAppId: apps.androidAppId,\n            body,\n            share: {\n              twitterUrl: 'http://twitter.com/share?url=http://bit.ly/AFROSTREAMTV&text='\n            },\n            initialState\n          })\n        }\n      } catch (err) {\n        Helmet.rewind()\n        if (err.redirect) {\n          res.redirect(err.redirect)\n          return\n        }\n        console.error('ROUTER ERROR:', pretty.render(err))\n        res.status(404).send('')\n      }\n    }\n  )\n}\n"]}